# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-nodejs # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  hello:
    handler: handler.hello

#    you can add any of the following events
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic


Resources:
  ##### DynamoDB resources
  # Code adapted from:
  # https://serverless.zone/iot-with-the-serverless-framework-e228fae87be#.gjsvksw0g#
  #
  # http://docs.aws.amazon.com/iot/latest/developerguide/dynamodb-v2-rule.html
  # The rest of the data should be stores as columns in Dynamo DB,
  # based on the attributes of the MQTT payload
  # Apparently to do this a role must grant
  # dynamodb:PutItem permission
  WorldLocationData:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: world-location-data-${{opt:stage}}
      AttributeDefinitions:
        - AttributeName: DeviceId
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: DeviceId
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
   
    # Should figure out the best values [TODO]
    ProvisionedThroughput:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
  ##### IoT resources
  # IoT Thing
  # More info: 
  TestThing:
    Type: AWS::IoT::Thing
         
  #http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-policy.html
  # IoT policy on what things are allowed to do
  TestThingPolicy:
    Type: "AWS::IoT::Policy"
    Properties:
      PolicyName:
        Ref: "TestThingPolicy"
      PolicyDocument:
        Version: "2016-10-31"
        Statement:
          - 
            Effect: "Allow"
            Action:
              - "iot:Connect"
            Resource:
              - "*"
  Parameters:
    NameParameter:
      Type: "String"
  # IoT IAM role (who)
  # Adapted from:
  # https://serverless.zone/iot-with-the-serverless-framework-e228fae87be#.gjsvksw0g 
  IoTRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2016-10-31"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
              Action:
                - sts:AssumeRole


  #IAM Policy for the IoTRole (Stage 2)
  #(Allow access IoT access to DynamoDB and Lambda)
  IoTRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IoTRole_Policy
      PolicyDocument:
        Version: "2016-10-31"
        Statement:
          - 
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: "*"
          -
            Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: "*"
        Roles: [{ Ref: IoTRole }]
   
  # AWS IoT Topic Rule - sends message from IoT to Lambda and DynamoDB
  # Does this apply to web sockets?
  # Adapted from:
  #  - http://serverless.zone/iot-with-the-serverless-framework-e228fae87be#.pteliefvm   
  # AWS IoT SQL documentation:
  #  - http://docs.aws.amazon.com/iot/latest/developerguide/iot-sql-functions.html
  TestThingRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        RuleDisabled: false
        Sql: "SELECT lat, lng FROM '${{opt:stage}}/devices/sensor/location'"
        Actions:
          - 
            DynamoDB:
              TableName: { Ref: LocationData }
              HashKeyField: "ClientId"
              HashKeyValue: "${clientId()}"
              RangeKeyField: "Timestamp"
              RangeKeyValue: "${timestamp()}"
              PayloadField: "Data"
              RoleArn: { Fn::GetAtt: [IoTRole, Arn] }
          - 
             Lambda:
               # What does Fn:GetAtt do?
               FunctionArn: { Fn:GetAtt: [ getPosition, Arn ] }


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
